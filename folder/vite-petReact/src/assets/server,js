/* /* const mongoose = require('mongoose');


const classesSchema = new mongoose.Schema({
    title: {
      type: String,
      required: true
    },
    strength: {
      type: Number,
      max: 20,
      required: true
    },
    noOfAllowedStudents: {
      type: Number,
      max: 20,
      required: true
    },
    currentStudent: [{
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Student'
    }]
  });  *///one to many students



  /* classesSchema.pre('save',  function(next) {
    this. = this. + 1;
    next();
  }) */

/* const Classes = mongoose.model("Classes", classesSchema);
module.exports = Classes; */


/* Classes.findOneAndUpdate({_id: res._id}, {$inc: { strength: 1 } }) */
    /*        Classes.findOneAndUpdate({_id: currentStudents._id}, {$inc: { strength: 1 } })
 *//*        let currentClass = await Student.findByIdAndUpdate(strength, {$inc: {strength: newClasses.strength + 1}});
 */
/*
router.post('/create-class', async (req, res) => {
    const { name, strength, noOfAllowedStudents, studentIds } = req.body;

    const newClass = new Class({
        name,
        strength,
        noOfAllowedStudents,
        currentStudents: []
    });

    try {
        const savedClass = await newClass.save();

        if (studentIds && studentIds.length > 0) {
            const students = await Student.find({
                _id: {
                    $in: studentIds
                }
            });

            students.forEach(student => {
                savedClass.currentStudents.push(student);
            });

            await savedClass.save();
        }

        res.send(savedClass);
    } catch (error) {
        res.status(500).send(error);
    }
});



const { number } = require('@hapi/joi');
const mongoose = require('mongoose');
const Schema = mongoose.Schema;


// create a class schema 1 to 10 , schema field : name, strength, no of allowed students, current students aaray of student ids
// 5 different students -id to array of student ids stored in studentclass schema names primary and foreign keys populate.
// create endpoint for creating class and add students to class schema object id ref foreign keys and primary keys


/* const scoreSchema = new Schema({ 
    name: String,
    Score: {type: Schema.Types.ObjectId, ref: 'subject'}
 }); */

/* const Subject = mongoose.model('Class', subjectSchema);
 *//* 
 */
/* module.exports = {Subject, Score}; */


/*
app.post("/", async (req, res) => {


    const student = new StudentModel({studentName: "Bharath", studentId: 3 });
    try {
        await student.save();
    } catch(err) {
        console.log(err);
    }
});

app.get("/read", async (req, res) => {
    StudentModel.find({}, (err, result) => {
        if(err) {
            res.send(err);
        } else {
            res.send(result);
    }
});
});

     app.post("/update", async (req, res) => {
    
    const newStudentName = req.body.newStudentName;
    const scores = req.body.scores;
    try {
        await student.save();
    } catch(err) {
        console.log(err);
    }
});

app.post("/insert", async (req, res) => {
    const student = new StudentModel({studentName: "Bharath", studentId: 3 });
    try {
        await student.save();
    } catch(err) {
        console.log(err);
    }
}); */

/* const Joi = require('@hapi/joi');
Joi.objectId = require('joi-objectid')(Joi)
const Teacher = require('../models/Teacher');

const teacherValidations  = Joi.object({
    name: Joi.string().min(5).max(50).required(),
    email: Joi.string().required().min(5).max(255).email(),
    password: Joi.string().alphanum().min(5).max(255)
    })

module.exports = teacherValidations; 

/* userSchema.methods.generateAuthToken = function() {
  const token = jwt.sign({_id: this.id, isAdmin: this.isAdmin}, config.get('jwtPrivateKey'));
  return token;
}
 */
/* app.use('/users', router);
app.use('/auth', auth); */

/* if(!config.has('jwtPrivateKey')) {
    console.error('ERROR: jwt private key not defined');
    process.exit(1);
 } */

/* if(request.params._id){
        return res.status(200).json({"message": "request"})
    }
    let student = await Student.findByIdAndDelete(req.params._id);
    const {name, age, Class, section, rollnumber, address, mobile, email } = req.body;
    /* let removeOneStudent = await Classes.findByIdAndUpdate(classId,{$pull: {currentStudent: student.id}, $inc: { strength: -1 }}); */

    /*  const auth = require('./routes/auth') */
/* const _ = require('lodash');
const config = require('config');
*/
/*

 async(req, res) => {
   const user = await User.findById(req.user._id).select('-password');
   res.json(user);
   
}

const registerUser = async (req, res) => {

    try {
      const { _id, name, email, password } = req.body;

      let user = await User.findOne({ email: email });
      if(user) return res.status(400).json("teacher already registered");
      
      const newUser = new User(  _.pick(req.body, ['_id', 'name', 'email', 'password'])); 
      const salt = await bcrypt.genSalt(10);
      newUser.password =await bcrypt.hash(newUser.password, salt);
      await newUser.save(); 

      const token = newUser.generateAuthToken();

      res.header('x-auth-token', token).json({success:true, data:  _.pick(newTeacher, ['_id', 'name', 'email']) });
      
   } catch (err) {
      res.status(400).json({success: false, message:err.message});
   } 
 };
 
 exports.registerUser = registerUser; 
 */

 // 

/* router.post('/addClass', classController.updateClass);

router.get('/getClass/:id', classController.getClass);

router.get('/addTeacher/:id', auth, async(req, res) => {
    const teacher = await Teacher.findById(req.teacher._id).select('-password');
    console.log(teacher);
    res.json(teacher);
    
 });
*/
 //adding teacher to the list of students add to all routes with authoerized

/* router.post('/register', userController.registerUser);
 */// authorization 

 /* const Teacher = require('../models/Teacher');
const _ = require('lodash');
const bcrypt = require('bcrypt');
const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const Joi = require('joi');

router.post('/login', async(req, res) => {
        
    try {
        const { email, password } = req.body;

        let teacher = await Teacher.findOne({ email: email });
        if(!teacher) return res.status(400).json("invalid email or password");

        const validPasword = await bcrypt.compare(password, teacher.password);
        
        if(!validPasword) return res.status(400).json("invalid email or password"); 
        
        const token = teacher.generateAuthToken();
        res.json(token);

    } catch (err) {
        res.status(400).json({success: false, message:err.message});
    }
 });


 function validate(req){
    const schema = Joi.object({
        email: Joi.string().required().min(5).max(255).email(),
        password: Joi.string().alphanum().min(5).max(255)
        })

        return Joi.validate(req, schema);
 }  

module.exports = router; */


function* tokenize(str) {
    let res = "";
    for(let i=0; i< str.length; i++) {
      const char = str[i]
      switch(char) {
        case ' ':
          continue
        case '*':
        case '-':
        case '+':
        case '/':
        case '(':
        case ')':
          if (res != ""){
            yield res 
            res = ""
          }
            yield char
            continue 
        default: 
            res += char
      }
    }
    if(res != ""){
        yield res
    }
  }

  const tokens = tokenize(' 1 * (20 -   300      ) ')


while (true) {
  let token = tokens.next()
  if (token.done) {
    break
  }
  console.log(token.value)
}